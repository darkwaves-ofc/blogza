// Authentication-related models (auth.prisma)
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @unique @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken    String       @unique
  userId          String       @db.ObjectId
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  loginAttempt    LoginAttempt @relation(fields: [loginAttemptId], references: [id], onDelete: Cascade)
  loginAttemptId  String       @db.ObjectId
  expires         DateTime
  pusher_sessions String[]
}

model LoginAttempt {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  ip        String
  location  String
  createdAt DateTime  @default(now())
  token     String    @unique
  verified  DateTime?
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessions  Session[]

  @@unique([location, ip, userId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model OTPConfirmation {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  expires DateTime
  otp     String

  @@unique([email])
}

model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model role {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  users            User[]
  position         Int
  permissions      String[]
  pages            String[]
  notifications    Notification[] @relation(fields: [notificationsIds], references: [id])
  notificationsIds String[]       @db.ObjectId

  @@unique([name])
}
